{
	"info": {
		"_postman_id": "53bc35d0-b79f-4680-a212-6287aef3dcd6",
		"name": "InStoreAPI",
		"description": "> This collection features end-to-end tests that ensure the InstoreAPI functions as expected \n  \n\n## **ü™ê Structure**\n\nThis collection group related requests and organize them in every folder based on their endpoint. Each Endpoint contains examples of response from API.\n\n- Authentication\n- Order\n- HealthCheck\n    \n\n## üîñ **How to use**\n\n#### **Step 1: Check requests**\n\n#### **Step 2: Update new Body data for POST And PUT Requests**\n\nUpdate or add new data in \"Body\" in the POST request.\n\n```\n{\n    \"Order\": {\n        \"id\": 153,\n        \"Total\": 7,\n        \"Entries\": {}\n    }\n}\n\n ```\n\n#### **Step 3: Update the variable _ If neccessary**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request : [http://localhost:5000/](http://localhost:5000/)\n\n#### **Step 4: Update the JWT token_ If neccessary**\n\nWe have set up a JWT for the collection in the Authorization tab . However, we can always update it to the new on in every request\n\n#### **Step 4: Send Request and Observe responses**\n\nOpen each request and click \"Send\" to check the response.\n\n#### **Step 5: Add tests in the \"Tests\" tab _ Optional**\n\nTests help you confirm that your API is working as expected. We can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n## üßë‚ÄçüíªPerformance test\n\n- We can utilize the Collection Runner feature to test the API performance\n- **Functional** tab : run the requests in a Postman Collection in a specified order to test the functionality of the API\n- **Performance** tab: use to simulate the activity of API's users. Each _virtual user_ runs the requests in the specified order in a repeating loop. All of the virtual users operate in parallel to simulate real-world load on API.\n- More details: [https://learning.postman.com/docs/collections/performance-testing/performance-test-configuration/](https://learning.postman.com/docs/collections/performance-testing/performance-test-configuration/)\n    \n\n## üöÄ Rate Limiting test\n\nRate limiting of API will disallow people/machines to call certain endpoints more than they should within a specified time period.\n\n1. **Testing within the rate limit**: Send requests to the API at a controlled rate that is within the allowed limit. Verify that the responses are successful and do not indicate any rate limiting issues.\n2. **Testing beyond the rate limit**: Send requests to the API at a rate that exceeds the allowed limit. Verify that the responses include the expected rate limit error status code 429 and Error message.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test(\"Should return a object\", function () {",
									"    pm.expect(response, 'The response is not an object').to.be.an('object');",
									"});",
									"",
									"pm.test(\"Should contain the `apiKey` property in the response\", function () {",
									"    pm.expect(response, 'The response does not contain the property').to.haveOwnProperty('apiKey');",
									"});",
									"",
									"pm.test(\"Should return a string for the `apiKey` property\", function () {",
									"    pm.expect(response.apiKey, 'The property is not a string').to.be.a('string');",
									"});",
									"",
									"// Only set the variable if the response is successful ",
									"if (pm.response.code === 200) {",
									"    pm.collectionVariables.set('apiKey', response.apiKey);",
									"}",
									""
								]
							}
						}
					],
					"id": "cdb13c8e-0166-4a85-b692-d43524c71737",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/auth",
						"description": "This request generates a new API key and saves it to the collection variables if the request is successful."
					},
					"response": [
						{
							"id": "0d501776-9d65-47c3-ae32-213d665be77f",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/v1/auth"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 11 Mar 2024 01:07:35 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "43"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "uWebSockets",
									"value": "20"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"apiKey\": \"123456789\"\n}"
						}
					]
				}
			],
			"id": "118f02d8-173c-427c-a939-093d2fbb0307",
			"description": "This folder tests authentication endpoint",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ae9767af-b820-48cb-ba14-d20230aa7e9c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "37e70234-86ad-491f-a09a-d80db70a302c",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"//all requests in this folder should be valid",
							"pm.test(\"Folder-level status check\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Order",
			"item": [
				{
					"name": "SubmitOrder",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const response = pm.response.json();",
									"pm.test(\"Status check\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should have a valid JSON format response body\", function () {",
									"    pm.expect(response).to.not.be.undefined;",
									"});",
									"",
									"pm.test(\"Should have the required 'account' object in the response\", function () {",
									"    pm.expect(response).to.be.an('object');",
									"    pm.expect(response.account).to.exist;",
									"});",
									"",
									"pm.test(\"Should have the `id` property in the account object and is a non-negative integer\", function () {",
									"  pm.expect(response.account.id).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"// Only set the variable if the response is successful ",
									"if (pm.response.code === 200) {",
									"    pm.collectionVariables.set(\"e2e_user_name_from\", JSON.parse(pm.request.body.raw).owner);",
									"    pm.collectionVariables.set(\"e2e_user_account_id_from\", response.account.id)",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Generate the payload data for the create user request",
									"",
									"let fullName = `${pm.variables.replaceIn(\"{{$randomFirstName}}\")} ${pm.variables.replaceIn(\"{{$randomLastName}}\")}`;",
									"",
									"let payload = {",
									"    \"owner\": `${fullName} - FromAccount`,",
									"    \"balance\": 0,",
									"    \"currency\": \"COSMIC_COINS\"",
									"}",
									"",
									"// Store the payload in a runtime-only variable ",
									"pm.variables.set('payload', JSON.stringify(payload));"
								]
							}
						}
					],
					"id": "b33f9763-a691-4153-8fcf-3e56b8c6aaf2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{payload}}"
						},
						"url": "{{baseUrl}}/api/v1/accounts",
						"description": "Submit an Order to InstoreAPI  \nthe Order can be editted in the body of the request"
					},
					"response": [
						{
							"id": "c47d41c2-8951-479f-b6d2-cacb08ce52f2",
							"name": "Successful Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{payload}}"
								},
								"url": "{{baseUrl}}/api/v1/accounts"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 11 Mar 2024 01:10:32 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "22"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "uWebSockets",
									"value": "20"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"account\": {\n        \"id\": 153\n    }\n}"
						},
						{
							"id": "0fb233c1-752f-471d-ad75-c42e2d3e372f",
							"name": "Validation Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{payload}}"
								},
								"url": "{{baseUrl}}/api/v1/accounts"
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "c1304494-f8a3-4445-9200-65cbfc228a0b",
							"name": "Register offline",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{payload}}"
								},
								"url": "{{baseUrl}}/api/v1/accounts"
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Order",
					"id": "5be593a0-f37e-4a34-bed9-6e372d744934",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": []
					},
					"response": [
						{
							"id": "dcb8803f-72d8-465e-adf9-16c9ac026a4a",
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": []
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				}
			],
			"id": "0cc6a37f-95ca-4893-8014-b39d87e386ce",
			"description": "This folder tests Order endpoint",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "HealthCheck",
			"item": [
				{
					"name": "health",
					"id": "079e8959-1aa6-4870-a8d6-429556b7df0b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/health"
					},
					"response": [
						{
							"id": "396690ab-ef7a-4353-83e6-44f38d265b7d",
							"name": "health",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/health"
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "ping",
					"id": "4dee2b13-7250-4016-9121-373736f7b658",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/ping"
					},
					"response": []
				}
			],
			"id": "51ef2359-c513-47c7-b90f-8b43287c0467",
			"description": "API health check endpoint returns the operational status of the API"
		}
	],
	"auth": {
		"type": "jwt",
		"jwt": {
			"algorithm": "HS256",
			"isSecretBase64Encoded": false,
			"payload": "{}",
			"addTokenTo": "header",
			"headerPrefix": "Bearer",
			"queryParamKey": "token",
			"header": "{}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "62d79b5e-f79f-45a6-a776-d7c1bc724c14",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "449fda4d-66f6-476d-bdbd-c0c610293861",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000",
			"type": "string"
		},
		{
			"value": "",
			"type": "string",
			"disabled": true
		}
	]
}